#
# Spring Boot Properties
#
#server.port=8181

#
# Quarkus Properties
#
quarkus.http.port=8181

#
# Application Kafka Clients Properties
#
# Kafka Bootstrap Servers
#app.kafka.bootstrap-servers = localhost:9092
app.kafka.bootstrap-servers = my-kafka-kafka-bootstrap:9092
# Kafka User Credentials
app.kafka.user.name     = application
app.kafka.user.password = ${KAFKA_USER_PASSWORD}
# To use with plain connections
app.kafka.security.protocol = SASL_PLAINTEXT
#app.kafka.security.protocol = SASL_SSL

# Application Producer Properties
app.producer.clienId = kafka-client-sb-producer-client
# No ACK
#app.producer.acks = 0
# Leader
#app.producer.acks = 1
# In-Sync
app.producer.acks = -1

# Application Consumer Properties
app.consumer.groupId	= kafka-client-sb-consumer
app.consumer.clientId	= kafka-client-sb-consumer-client
# Pooling properties
app.consumer.maxPoolRecords = 1000
app.consumer.maxPartitionFetchBytes = 1048576
# Auto commit
app.consumer.autoCommit = false
# latest | earliest
app.consumer.offsetReset = earliest
# Seconds
app.consumer.poolTimeout = 10

# Service Registry
#apicurio.registry.url = http://localhost:8080/api
apicurio.registry.url = http://service-registry.amq-streams-demo.apps-crc.testing/api
#apicurio.registry.cached = true
#apicurio.registry.use-specific-avro-reader = true

#
# Quarkus Kafka Properties (SmallRye Kafka Connector)
#
# Configure the SmallRye Kafka connector
kafka.bootstrap.servers = ${app.kafka.bootstrap-servers}
kafka.security.protocol = ${app.kafka.security.protocol}
kafka.sasl.mechanism = SCRAM-SHA-512
kafka.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=${app.kafka.user.name} password=${app.kafka.user.password};

# Configure the Kafka source (we read from it)
mp.messaging.incoming.messages.connector=smallrye-kafka
mp.messaging.incoming.messages.group.id=${app.consumer.groupId}-mp-incoming-channel
mp.messaging.incoming.messages.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.messages.value.deserializer=io.apicurio.registry.utils.serde.AvroKafkaDeserializer
mp.messaging.incoming.messages.properties.partition.assignment.strategy=org.apache.kafka.clients.consumer.RoundRobinAssignor
mp.messaging.incoming.messages.apicurio.registry.url=${apicurio.registry.url}
mp.messaging.incoming.messages.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider

# Configure the Kafka sink (we write on it)
mp.messaging.outgoing.messages-out.connector=smallrye-kafka
mp.messaging.outgoing.messages-out.topic=messages
mp.messaging.outgoing.messages-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.messages-out.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.messages-out.apicurio.registry.url=${apicurio.registry.url}
mp.messaging.outgoing.messages-out.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.outgoing.messages-out.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.TopicIdStrategy

#
# Spring Kafka Properties (Not longer needed)
#
#spring.kafka.bootstrap-servers = ${app.kafka.bootstrap-servers}
#spring.kafka.properties.security.protocol=${app.kafka.security.protocol}
#spring.kafka.properties.sasl.mechanism=SCRAM-SHA-512
#spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="${app.kafka.user.name}" password="${app.kafka.user.password}";
# Spring Kafka Producer
#spring.kafka.producer.acks= ${app.producer.acks}
#spring.kafka.producer.client-id = spring-kafka-clients-sb-producer-client
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
# Producer Properties
#spring.kafka.producer.properties.apicurio.registry.url = ${apicurio.registry.url}
#spring.kafka.producer.properties.apicurio.registry.artifact-id = io.apicurio.registry.utils.serde.strategy.TopicIdStrategy
# Spring Kafka Consumer
#spring.kafka.listener.ack-mode = manual
#spring.kafka.consumer.group-id = spring-kafka-clients-sb-sample-group
#spring.kafka.consumer.auto-offset-reset = earliest
#spring.kafka.consumer.enable-auto-commit=false
#spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer = io.apicurio.registry.utils.serde.AvroKafkaDeserializer
# Consumer Properties
#spring.kafka.consumer.properties.partition.assignment.strategy = org.apache.kafka.clients.consumer.RoundRobinAssignor
# Consumer Properties - Service Registry Integration
#spring.kafka.consumer.properties.apicurio.registry.url = ${apicurio.registry.url}
# Use Specific Avro classes instead of the GenericRecord class definition
#spring.kafka.consumer.properties.apicurio.registry.use-specific-avro-reader = true

#
# Swagger UI Properties by Quarkus
#
#springdoc.version = @project.version@
#springdoc.api-docs.enabled = true
#springdoc.swagger-ui.path = /swagger-ui.html
#springdoc.swagger-ui.displayRequestDuration = true

quarkus.swagger-ui.always-include=true
mp.openapi.extensions.smallrye.info.title=Kafka Client Spring Boot Application API
%dev.mp.openapi.extensions.smallrye.info.title=Kafka Client Spring Boot Application API (DEV)
%test.mp.openapi.extensions.smallrye.info.title=Kafka Client Spring Boot Application API (TST)
mp.openapi.extensions.smallrye.info.version=3.0.0-SNAPSHOT
mp.openapi.extensions.smallrye.info.description=Sample Spring Boot REST service using OpenAPI 3 to produce and consume messages from a Kafka Cluster
mp.openapi.extensions.smallrye.info.contact.email=rmarting@redhat.com
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0
mp.openapi.extensions.smallrye.info.license.url=http://www.apache.org/licenses/LICENSE-2.0.html
mp.openapi.extensions.smallrye.info.tags=producer,consumer
